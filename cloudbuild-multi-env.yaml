# Multi-environment Cloud Build configuration
# Deploys to different environments based on branch

steps:
  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/ai-rookie-backend:$COMMIT_SHA', '-f', 'backend/Dockerfile', 'backend']

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/ai-rookie-backend:$COMMIT_SHA']

  # Deploy to development environment (develop branch)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "develop" ]; then
          echo "Deploying to development environment..."
          gcloud run deploy ai-rookie-backend-dev \
            --image gcr.io/$PROJECT_ID/ai-rookie-backend:$COMMIT_SHA \
            --region europe-north1 \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 3 \
            --concurrency 80 \
            --timeout 300 \
            --set-env-vars NODE_ENV=development \
            --set-env-vars GOOGLE_CLOUD_PROJECT=$PROJECT_ID \
            --tag dev
        else
          echo "Skipping development deployment for branch: $BRANCH_NAME"
        fi

  # Deploy to staging environment (staging branch)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "staging" ]; then
          echo "Deploying to staging environment..."
          gcloud run deploy ai-rookie-backend-staging \
            --image gcr.io/$PROJECT_ID/ai-rookie-backend:$COMMIT_SHA \
            --region europe-north1 \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 5 \
            --concurrency 80 \
            --timeout 300 \
            --set-env-vars NODE_ENV=staging \
            --set-env-vars GOOGLE_CLOUD_PROJECT=$PROJECT_ID \
            --tag staging
        else
          echo "Skipping staging deployment for branch: $BRANCH_NAME"
        fi

  # Deploy to production environment (main branch)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Deploying to production environment..."
          gcloud run deploy ai-rookie-backend \
            --image gcr.io/$PROJECT_ID/ai-rookie-backend:$COMMIT_SHA \
            --region europe-north1 \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 10 \
            --concurrency 80 \
            --timeout 300 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars GOOGLE_CLOUD_PROJECT=$PROJECT_ID \
            --tag production
        else
          echo "Skipping production deployment for branch: $BRANCH_NAME"
        fi

  # Run database migrations for production
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "Running database migrations..."
          gcloud run jobs create ai-rookie-migration-$BUILD_ID \
            --image gcr.io/$PROJECT_ID/ai-rookie-backend:$COMMIT_SHA \
            --region europe-north1 \
            --task-timeout 600 \
            --parallelism 1 \
            --command "npx" \
            --args "prisma,migrate,deploy" \
            --set-env-vars NODE_ENV=production \
            --set-env-vars GOOGLE_CLOUD_PROJECT=$PROJECT_ID
          
          gcloud run jobs execute ai-rookie-migration-$BUILD_ID --region europe-north1 --wait
          gcloud run jobs delete ai-rookie-migration-$BUILD_ID --region europe-north1 --quiet
        fi

  # Send deployment notification
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deployment completed for branch: $BRANCH_NAME"
        echo "Build ID: $BUILD_ID"
        echo "Commit SHA: $COMMIT_SHA"
        
        # You can add Slack/Discord webhook notification here
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Deployment completed for '$BRANCH_NAME'"}' \
        #   $SLACK_WEBHOOK_URL

substitutions:
  _BRANCH_NAME: ${BRANCH_NAME}

images:
  - 'gcr.io/$PROJECT_ID/ai-rookie-backend:$COMMIT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

timeout: '1800s'