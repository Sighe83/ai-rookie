generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  name          String
  phone         String?
  company       String?
  department    String?
  role          String    @default("USER")
  siteMode      String    @default("B2B") @map("site_mode")
  password      String?
  emailVerified Boolean   @default(false) @map("email_verified")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  bookings      Booking[]
  tutor         Tutor?
  availabilityChanges TutorAvailabilityLog[]

  @@map("users")
}

model Tutor {
  id           String              @id @default(uuid()) @db.Uuid
  userId       String              @unique @map("user_id") @db.Uuid
  title        String
  specialty    String
  experience   String?
  valueProp    String?             @map("value_prop")
  img          String?
  isActive     Boolean             @default(true) @map("is_active")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  bookings     Booking[]
  sessions     Session[]
  timeSlots    TutorTimeSlot[]
  availabilityLogs TutorAvailabilityLog[]
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tutors")
}

model Session {
  id          String    @id @default(uuid()) @db.Uuid
  tutorId     String    @map("tutor_id") @db.Uuid
  title       String
  description String
  duration    Int       @default(60)
  price       Decimal   @db.Decimal(10,2)
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  bookings    Booking[]
  availabilityLogs TutorAvailabilityLog[]
  tutor       Tutor     @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@index([tutorId])
  @@map("sessions")
}

enum BookingStatus {
  DRAFT
  AWAITING_PAYMENT
  CONFIRMED
  EXPIRED
  CANCELLED
  COMPLETED

  @@map("booking_status")
}

model Booking {
  id               String        @id @default(uuid()) @db.Uuid
  userId           String        @map("user_id") @db.Uuid
  tutorId          String        @map("tutor_id") @db.Uuid
  sessionId        String        @map("session_id") @db.Uuid
  format           String
  selectedDateTime DateTime      @map("selected_date_time")
  participants     Int?          @default(1)
  totalPrice       Decimal       @map("total_price") @db.Decimal(10,2)
  unifiedStatus    BookingStatus @default(DRAFT) @map("unified_status")
  siteMode         String        @map("site_mode")
  contactName      String        @map("contact_name")
  contactEmail     String        @map("contact_email")
  contactPhone     String?       @map("contact_phone")
  company          String?
  department       String?
  paymentIntentId  String?       @map("payment_intent_id")
  paymentExpiresAt DateTime?     @map("payment_expires_at")
  paidAt           DateTime?     @map("paid_at")
  notes            String?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  confirmedAt      DateTime?     @map("confirmed_at")
  cancelledAt      DateTime?     @map("cancelled_at")
  session          Session       @relation(fields: [sessionId], references: [id])
  tutor            Tutor         @relation(fields: [tutorId], references: [id])
  user             User          @relation(fields: [userId], references: [id])

  @@index([sessionId])
  @@index([tutorId])
  @@index([userId])
  @@index([unifiedStatus])
  @@map("bookings")
}

model TutorTimeSlot {
  id        String   @id @default(uuid()) @db.Uuid
  tutorId   String   @map("tutor_id") @db.Uuid
  date      DateTime @db.Date
  startTime DateTime @map("start_time") @db.Time
  endTime   DateTime @map("end_time") @db.Time
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  tutor     Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([tutorId, date, startTime, endTime], name: "no_overlapping_slots")
  @@index([tutorId])
  @@index([date])
  @@index([tutorId, date])
  @@map("tutor_time_slots")
}

model SystemSettings {
  id    String @id @default(uuid()) @db.Uuid
  key   String @unique
  value Json

  @@map("system_settings")
}

model TutorAvailabilityLog {
  id        String   @id @default(uuid()) @db.Uuid
  tutorId   String   @map("tutor_id") @db.Uuid
  date      DateTime @db.Date
  startTime DateTime @map("start_time") @db.Time
  endTime   DateTime? @map("end_time") @db.Time
  action    String   // 'ADDED' or 'REMOVED'
  reason    String?  @default("tutor_edit")
  changedAt DateTime @default(now()) @map("changed_at")
  changedBy String   @map("changed_by") @db.Uuid
  sessionId String?  @map("session_id") @db.Uuid
  notes     String?
  
  // Relations
  tutor     Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  changedByUser User @relation(fields: [changedBy], references: [id], onDelete: Cascade)
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([tutorId, date])
  @@index([changedAt])
  @@index([action])
  @@map("tutor_availability_log")
}
