// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// SQLite doesn't support enums, using String with default values
// UserRole: USER, TUTOR, ADMIN
// SiteMode: B2B, B2C
// BookingStatus: PENDING, CONFIRMED, CANCELLED, COMPLETED
// SessionFormat: INDIVIDUAL, TEAM, PROGRAM, GROUP

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phone         String?
  company       String?
  department    String?
  role          String    @default("USER")
  siteMode      String    @default("B2B")
  password      String?   // Optional for guest bookings
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  bookings      Booking[]
  tutor         Tutor?

  @@map("users")
}

model Tutor {
  id           String  @id @default(cuid())
  userId       String  @unique
  title        String
  specialty    String
  experience   String?
  valueProp    String?
  img          String?
  basePrice    Int     // Price in øre (cents)
  isActive     Boolean @default(true)
  
  // B2C specific
  price        Int?    // B2C individual session price

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions     Session[]
  bookings     Booking[]
  availability TutorAvailability[]

  @@map("tutors")
}

model Session {
  id          String @id @default(cuid())
  tutorId     String
  title       String
  description String
  duration    Int    @default(60) // minutes
  isActive    Boolean @default(true)

  // Relations
  tutor       Tutor     @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  bookings    Booking[]

  @@map("sessions")
}

model Booking {
  id               String        @id @default(cuid())
  userId           String
  tutorId          String
  sessionId        String
  
  // Booking details
  format           String
  selectedDateTime DateTime
  participants     Int?          // For team bookings
  totalPrice       Int           // Price in øre (cents)
  status           String        @default("PENDING")
  siteMode         String
  
  // Contact information (for guest bookings)
  contactName      String
  contactEmail     String
  contactPhone     String?
  company          String?
  department       String?
  
  // Payment information
  paymentStatus    String?       @default("PENDING") // PENDING, COMPLETED, FAILED, REFUNDED
  paymentIntentId  String?       // Stripe payment intent ID
  paidAt           DateTime?     // When payment was completed
  
  // Metadata
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  confirmedAt      DateTime?
  cancelledAt      DateTime?

  // Relations
  user             User          @relation(fields: [userId], references: [id])
  tutor            Tutor         @relation(fields: [tutorId], references: [id])
  session          Session       @relation(fields: [sessionId], references: [id])

  @@map("bookings")
}

model TutorAvailability {
  id        String   @id @default(cuid())
  tutorId   String
  date      DateTime
  timeSlots String   // JSON string of time slots: [{ time: "09:00", available: true, booked: false }]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tutor     Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade)

  @@unique([tutorId, date])
  @@map("tutor_availability")
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String // JSON string
  
  @@map("system_settings")
}